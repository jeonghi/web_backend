// gradle은 자바 등 JVM 에서 실행되는 언어의 빌드 자동화를 위해 사용되는 툴이다.
// 빌드 자동화 툴을 이용하면 컴파일, 라이브러리 다운로드, 패키징, 테스팅 등을 자동화할 수 있다.

// gradle은 의도적으로 많은 기능을 제공하지 않는다.
// 대신 플러그인을 통해 그래들을 확장해 사용할 수 있다.
plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	// 자바를 컴파일 하려면 그래들 자바 플러그인이 필요함.
	id 'java' // 빌드를 위해 자바 플러그인을 사용함을 명시함.
}
// 프로젝트 메타 데이터 //
group = 'com.example' // 어플리케이션을 배포하는 데 사용.
version = '0.0.1-SNAPSHOT' // 이 프로젝트의 버전 (배포시마다 버전업됨)
sourceCompatibility = '1.8' // 위에서 자바 컴파일을 위해 자바 플러그인을 추가했는데, 이 자바 플러그인은 sourceCompatibility 에 명시된 자바 버전을 이용해 소스를 컴파일한다.
/////////////////////

configurations {
	compileOnly {
		extendsFrom annotationProcessor
		// 롬복 라이브러리를 개발시간 단축을 위해 사용한다.
		// 롬복은 어노테이션을 추가하면 컴파일 시 그에 상응하는 코드를 만들어 주는 라이브러리인데,
		// 롬복이 코드를 만드려면, 어노테이션 프로세서 (처리기)라는 것이 필요하다.
		// 그래서 설정을 통해 컴파일 당시 어노테이션 프로세서를 사용하라고 그래들에게 알려준다.
		// 어떤 어노테이션 프로세서를 사용할 것인가는 디펜던시에 명시한다.
	}
}

// 그래들이 라이브러리들을 다운받는 곳이다.
repositories {
	mavenCentral()
}

// 디펜던시 섹션에서 이 프로젝트에서 사용할 라이브러리를 명시하면 그래들이 레포지토리에서 라이브러리를 다운 및 설치한다.
// implementation , runtimeOnly 등은 라이브러리의 scope 에 대한 내용인데 일단 넘긴다.
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation 'com.google.guava:guava:31.1-jre'

}

tasks.named('test') {
	useJUnitPlatform()
}
